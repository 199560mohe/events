name: Remove Governed Labels

on:
  discussion:
    types: [labeled, created]

jobs:
  check_labels:
    name: Check labels
    runs-on: ubuntu-latest

    steps:
      - name: Check if employee
        id: check_employee
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.READ_GITHUB_ORG_MEMBERS_TOKEN }}
          result-encoding: string
          script: |
            console.log(context.payload);

            try {
              const response = await github.rest.orgs.checkMembershipForUser({
                org: `github`,
                username: context.payload.sender.login
              });

              if (response.status === 204) {
                return 'true';
              } else {
                return 'false';
              }
            } catch (error) {
              console.log(error);
              return 'false';
            }
      
      - name: Fetch label ids
        id: fetch_label_ids
        if: ${{ steps.check_employee.outputs.result == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
        run: |
          gh api graphql -F owner=$OWNER -F name=$REPO -f query='
            query($owner: String!, $name: String!, $labels: [String!]!) {
              repository(owner: $owner, name: $name){
                labels(first: 3, query: $labels) {
                  edges {
                    node {
                      id
                      name
                    }
                  }
                }
              }
            }' -f labels="more information needed,fixed,in backlog" > repository_label_data.json
            
          echo 'LABEL_IDS='$(jq '.data.repository.labels.edges[].node.id' repository_label_data.json) >> $GITHUB_ENV
          
      - name: Fetch discussion ID
        id: fetch_discussion_id
        if: ${{ steps.check_employee.outputs.result == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
        run: |
          gh api graphql -F owner=$OWNER -F name=$REPO -f query='
            query($owner: String!, $name: String!) {
              repository(owner: $owner, name: $name) {
                discussion(number: ${{ github.event.discussion.number }}) {
                  id
                }
              }
            }' > discussion_data.json
            
          echo 'DISCUSSION_ID='$(jq '.data.repository.discussion.id' discussion_data.json) >> $GITHUB_ENV

          
      - name: Unlabel the discussion
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DISCUSSION_ID: ${{ env.DISCUSSION_ID }}
          LABEL_IDS: ${{ env.LABEL_IDS }}
        run: |
          gh api graphql -f query='
            mutation($labelableId: ID!, $labelIds: [ID!]!) {
              removeLabelsFromLabelable(input: {labelableId: $labelableId, labelIds: $labelIds}) {
                labelable {
                  labels(first: 10) {
                    edges {
                      node {
                        id
                        name
                      }
                    }
                  }
                }
              }
            }' -f labelableId=$DISCUSSION_ID -f labelIds=$LABEL_IDS
